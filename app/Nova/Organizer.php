<?php

namespace App\Nova;

use App\Nova\Actions\SelfieVerificationReminder;
use App\Nova\Actions\SendNotificationToUsers;
use App\Nova\Actions\VerifyIdentityAction;
use Illuminate\Http\Request;
use Illuminate\Validation\Rule;
use Laravel\Nova\Fields\Hidden;
use Laravel\Nova\Fields\ID;
use Laravel\Nova\Fields\MorphToMany;
use Laravel\Nova\Fields\Number;
use Laravel\Nova\Fields\Text;
use Laravel\Nova\Http\Requests\NovaRequest;

class Organizer extends Resource
{
    /**
     * The model the resource corresponds to.
     *
     * @var string
     */
    public static $model = \App\Models\User::class;

    /**
     * The single value that should be used to represent the resource when being displayed.
     *
     * @var string
     */
    public static $title = 'fullname';

    public static function label()
    {
        return "Commissions";
    }

    public static function indexQuery(NovaRequest $request, $query)
    {
        $query->where("user_type","customer")->whereNotNull('firstname')
            ->whereNotNull('lastname');
        return parent::indexQuery($request, $query); // TODO: Change the autogenerated stub
    }

    /**
     * The columns that should be searched.
     *
     * @var array
     */
    public static $search = [
        'id', 'firstname', 'lastname', 'email', 'phone_number'
    ];



    /**
     * Get the fields displayed by the resource.
     *
     * @param \Laravel\Nova\Http\Requests\NovaRequest $request
     * @return array
     */
    public function fields(NovaRequest $request)
    {
        return [
            ID::make()->sortable(),

            Text::make('Prenom', 'firstname')
                ->sortable()
                ->readonly(),

            Text::make('Nom', 'lastname')
                ->sortable()
                ->readonly(),

            Text::make('Email')
                ->sortable()
                ->readonly(),


            Text::make('TÃ©lÃ©phone', 'phone_number')
                ->sortable()
                ->readonly(),

            Number::make("Commission","organizer_commission")->step("any")->max(100)->min(0)->sortable(),


        ];
    }

    /**
     * Get the cards available for the request.
     *
     * @param \Laravel\Nova\Http\Requests\NovaRequest $request
     * @return array
     */
    public function cards(NovaRequest $request)
    {
        return [];
    }

    /**
     * Get the filters available for the resource.
     *
     * @param \Laravel\Nova\Http\Requests\NovaRequest $request
     * @return array
     */
    public function filters(NovaRequest $request)
    {
        return [];
    }

    /**
     * Get the lenses available for the resource.
     *
     * @param \Laravel\Nova\Http\Requests\NovaRequest $request
     * @return array
     */
    public function lenses(NovaRequest $request)
    {
        return [];
    }

    public static function authorizedToCreate(Request $request)
    {
        return false;
    }

    public function authorizedToDelete(Request $request)
    {
        return false;
    }


    /**
     * Get the actions available for the resource.
     *
     * @param \Laravel\Nova\Http\Requests\NovaRequest $request
     * @return array
     */
    public function actions(NovaRequest $request)
    {
        return [
            new SendNotificationToUsers()
        ];
    }


    public static function relatableQuery(NovaRequest $request, $query)
    {
        if ($request->viaResource == 'events') {
            $event = \App\Models\Party::find($request->viaResourceId);
            $query->where('id', '!=', $event->user_id);
        }

        return $query;
    }
}
